/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type {
    FunctionFragment,
    Result,
    EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from './common'

export type VaultCheckpointStruct = {
    activeCollateral: PromiseOrValue<BigNumberish>
    borrowedCollateral: PromiseOrValue<BigNumberish>
    totalCollateral: PromiseOrValue<BigNumberish>
    accruedPremium: PromiseOrValue<BigNumberish>
}

export type VaultCheckpointStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
] & {
    activeCollateral: BigNumber
    borrowedCollateral: BigNumber
    totalCollateral: BigNumber
    accruedPremium: BigNumber
}

export type EpochDataStruct = {
    expired: PromiseOrValue<boolean>
    preExpired: PromiseOrValue<boolean>
    startTime: PromiseOrValue<BigNumberish>
    expiry: PromiseOrValue<BigNumberish>
    settlementPrice: PromiseOrValue<BigNumberish>
    settlementPercentage: PromiseOrValue<BigNumberish>
    totalCollateralBalance: PromiseOrValue<BigNumberish>
    totalCollateralFromLiquidations: PromiseOrValue<BigNumberish>
    totalBorrowedCollateral: PromiseOrValue<BigNumberish>
    totalSuppliedUnderlying: PromiseOrValue<BigNumberish>
    collateralExchangeRate: PromiseOrValue<BigNumberish>
    settlementCollateralExchangeRate: PromiseOrValue<BigNumberish>
    strikes: PromiseOrValue<BigNumberish>[]
    totalRewardsCollected: PromiseOrValue<BigNumberish>[]
    rewardDistributionRatios: PromiseOrValue<BigNumberish>[]
    rewardTokensToDistribute: PromiseOrValue<string>[]
}

export type EpochDataStructOutput = [
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    BigNumber[],
    string[]
] & {
    expired: boolean
    preExpired: boolean
    startTime: BigNumber
    expiry: BigNumber
    settlementPrice: BigNumber
    settlementPercentage: BigNumber
    totalCollateralBalance: BigNumber
    totalCollateralFromLiquidations: BigNumber
    totalBorrowedCollateral: BigNumber
    totalSuppliedUnderlying: BigNumber
    collateralExchangeRate: BigNumber
    settlementCollateralExchangeRate: BigNumber
    strikes: BigNumber[]
    totalRewardsCollected: BigNumber[]
    rewardDistributionRatios: BigNumber[]
    rewardTokensToDistribute: string[]
}

export type EpochStrikeDataStruct = {
    strikeToken: PromiseOrValue<string>
    totalCollateral: PromiseOrValue<BigNumberish>
    activeCollateral: PromiseOrValue<BigNumberish>
    borrowedCollateral: PromiseOrValue<BigNumberish>
    totalPremiums: PromiseOrValue<BigNumberish>
    checkpointPointer: PromiseOrValue<BigNumberish>
    rewardStoredForPremiums: PromiseOrValue<BigNumberish>[]
    rewardDistributionRatiosForPremiums: PromiseOrValue<BigNumberish>[]
}

export type EpochStrikeDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[]
] & {
    strikeToken: string
    totalCollateral: BigNumber
    activeCollateral: BigNumber
    borrowedCollateral: BigNumber
    totalPremiums: BigNumber
    checkpointPointer: BigNumber
    rewardStoredForPremiums: BigNumber[]
    rewardDistributionRatiosForPremiums: BigNumber[]
}

export type WritePositionStruct = {
    epoch: PromiseOrValue<BigNumberish>
    strike: PromiseOrValue<BigNumberish>
    collateralAmount: PromiseOrValue<BigNumberish>
    checkpointIndex: PromiseOrValue<BigNumberish>
    rewardDistributionRatios: PromiseOrValue<BigNumberish>[]
}

export type WritePositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[]
] & {
    epoch: BigNumber
    strike: BigNumber
    collateralAmount: BigNumber
    checkpointIndex: BigNumber
    rewardDistributionRatios: BigNumber[]
}

export interface SsovV3DatastoreClientInterface extends utils.Interface {
    functions: {
        'bootstrapData(uint256[],uint256,uint256,uint256)': FunctionFragment
        'bootstrapStrikeData(uint256,uint256,address,uint256)': FunctionFragment
        'borrow(address,uint256,uint256,uint256,uint256,uint256[])': FunctionFragment
        'checkpoints(uint256,uint256,uint256)': FunctionFragment
        'debtPositionMinter()': FunctionFragment
        'deposit(uint256,uint256,uint256,uint256,uint256[])': FunctionFragment
        'expire(uint256,uint256,uint256)': FunctionFragment
        'getCheckpoint(uint256,uint256,uint256)': FunctionFragment
        'getCheckpoints(uint256,uint256)': FunctionFragment
        'getCheckpointsLength(uint256,uint256)': FunctionFragment
        'getDebtPosition(uint256)': FunctionFragment
        'getEpochData(uint256)': FunctionFragment
        'getEpochStrikeData(uint256,uint256)': FunctionFragment
        'getExpiry(uint256)': FunctionFragment
        'getOwnerDebtPositions(address)': FunctionFragment
        'getWritePosition(uint256)': FunctionFragment
        'owner()': FunctionFragment
        'preExpireEpoch(uint256,uint256,uint256,uint256,bool)': FunctionFragment
        'purchase(uint256,uint256,uint256,uint256,uint256[])': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'repay(uint256,uint256,uint256)': FunctionFragment
        'setDebtPositionMinter(address)': FunctionFragment
        'setSsovV3(address)': FunctionFragment
        'ssov()': FunctionFragment
        'transferOwnership(address)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'bootstrapData'
            | 'bootstrapStrikeData'
            | 'borrow'
            | 'checkpoints'
            | 'debtPositionMinter'
            | 'deposit'
            | 'expire'
            | 'getCheckpoint'
            | 'getCheckpoints'
            | 'getCheckpointsLength'
            | 'getDebtPosition'
            | 'getEpochData'
            | 'getEpochStrikeData'
            | 'getExpiry'
            | 'getOwnerDebtPositions'
            | 'getWritePosition'
            | 'owner'
            | 'preExpireEpoch'
            | 'purchase'
            | 'renounceOwnership'
            | 'repay'
            | 'setDebtPositionMinter'
            | 'setSsovV3'
            | 'ssov'
            | 'transferOwnership'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'bootstrapData',
        values: [
            PromiseOrValue<BigNumberish>[],
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'bootstrapStrikeData',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'borrow',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'checkpoints',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'debtPositionMinter',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'deposit',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'expire',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getCheckpoint',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getCheckpoints',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getCheckpointsLength',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getDebtPosition',
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getEpochData',
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getEpochStrikeData',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getExpiry',
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getOwnerDebtPositions',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'getWritePosition',
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'preExpireEpoch',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<boolean>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'purchase',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>[]
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'renounceOwnership',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'repay',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setDebtPositionMinter',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'setSsovV3',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'ssov', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'transferOwnership',
        values: [PromiseOrValue<string>]
    ): string

    decodeFunctionResult(
        functionFragment: 'bootstrapData',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'bootstrapStrikeData',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'checkpoints',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'debtPositionMinter',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'expire', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'getCheckpoint',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getCheckpoints',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getCheckpointsLength',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getDebtPosition',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getEpochData',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getEpochStrikeData',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'getExpiry', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'getOwnerDebtPositions',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getWritePosition',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'preExpireEpoch',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'renounceOwnership',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'setDebtPositionMinter',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'setSsovV3', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'ssov', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'transferOwnership',
        data: BytesLike
    ): Result

    events: {
        'BorrowSqueezed(uint256,uint256,uint256)': EventFragment
        'BorrowUnsqueezed(uint256,uint256,uint256)': EventFragment
        'Borrowed(address,uint256,uint256,uint256,uint256)': EventFragment
        'DataBootstrapped(uint256,uint256)': EventFragment
        'DebtPositionMinterSet(address)': EventFragment
        'Deposited(uint256,uint256,uint256,uint256)': EventFragment
        'Expired(uint256,uint256,uint256)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'PreExpired(uint256,uint256,uint256,bool)': EventFragment
        'Purchased(uint256,uint256,uint256,uint256)': EventFragment
        'Repaid(uint256,uint256,uint256)': EventFragment
        'RewardsUpdated(uint256,uint256)': EventFragment
        'Squeezed(uint256,uint256,uint256,uint256)': EventFragment
        'SsovV3Set(address)': EventFragment
        'StrikeDataBootstrapped(uint256,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'BorrowSqueezed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'BorrowUnsqueezed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Borrowed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DataBootstrapped'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DebtPositionMinterSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Deposited'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Expired'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PreExpired'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Purchased'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Repaid'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RewardsUpdated'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Squeezed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SsovV3Set'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'StrikeDataBootstrapped'): EventFragment
}

export interface BorrowSqueezedEventObject {
    _strike: BigNumber
    _requiredCollateral: BigNumber
    _epoch: BigNumber
}
export type BorrowSqueezedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    BorrowSqueezedEventObject
>

export type BorrowSqueezedEventFilter = TypedEventFilter<BorrowSqueezedEvent>

export interface BorrowUnsqueezedEventObject {
    _strike: BigNumber
    _collateralToReturn: BigNumber
    _epoch: BigNumber
}
export type BorrowUnsqueezedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    BorrowUnsqueezedEventObject
>

export type BorrowUnsqueezedEventFilter =
    TypedEventFilter<BorrowUnsqueezedEvent>

export interface BorrowedEventObject {
    _borrower: string
    _strike: BigNumber
    _requiredCollateral: BigNumber
    _epoch: BigNumber
    _amount: BigNumber
}
export type BorrowedEvent = TypedEvent<
    [string, BigNumber, BigNumber, BigNumber, BigNumber],
    BorrowedEventObject
>

export type BorrowedEventFilter = TypedEventFilter<BorrowedEvent>

export interface DataBootstrappedEventObject {
    _expiry: BigNumber
    _epoch: BigNumber
}
export type DataBootstrappedEvent = TypedEvent<
    [BigNumber, BigNumber],
    DataBootstrappedEventObject
>

export type DataBootstrappedEventFilter =
    TypedEventFilter<DataBootstrappedEvent>

export interface DebtPositionMinterSetEventObject {
    debtPositionMinter: string
}
export type DebtPositionMinterSetEvent = TypedEvent<
    [string],
    DebtPositionMinterSetEventObject
>

export type DebtPositionMinterSetEventFilter =
    TypedEventFilter<DebtPositionMinterSetEvent>

export interface DepositedEventObject {
    _amount: BigNumber
    _epoch: BigNumber
    _strike: BigNumber
    _tokenId: BigNumber
}
export type DepositedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber],
    DepositedEventObject
>

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>

export interface ExpiredEventObject {
    _settlementPrice: BigNumber
    _settlementCollateralExchangeRate: BigNumber
    _epoch: BigNumber
}
export type ExpiredEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    ExpiredEventObject
>

export type ExpiredEventFilter = TypedEventFilter<ExpiredEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>

export interface PreExpiredEventObject {
    epoch: BigNumber
    settlementPercentage: BigNumber
    settlementPrice: BigNumber
    preExpired: boolean
}
export type PreExpiredEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, boolean],
    PreExpiredEventObject
>

export type PreExpiredEventFilter = TypedEventFilter<PreExpiredEvent>

export interface PurchasedEventObject {
    _epoch: BigNumber
    _strike: BigNumber
    _premium: BigNumber
    _requiredCollateral: BigNumber
}
export type PurchasedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber],
    PurchasedEventObject
>

export type PurchasedEventFilter = TypedEventFilter<PurchasedEvent>

export interface RepaidEventObject {
    _tokenId: BigNumber
    _amount: BigNumber
    _suppliedAmount: BigNumber
}
export type RepaidEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    RepaidEventObject
>

export type RepaidEventFilter = TypedEventFilter<RepaidEvent>

export interface RewardsUpdatedEventObject {
    _strike: BigNumber
    _epoch: BigNumber
}
export type RewardsUpdatedEvent = TypedEvent<
    [BigNumber, BigNumber],
    RewardsUpdatedEventObject
>

export type RewardsUpdatedEventFilter = TypedEventFilter<RewardsUpdatedEvent>

export interface SqueezedEventObject {
    _strike: BigNumber
    _requiredCollateral: BigNumber
    _epoch: BigNumber
    _premium: BigNumber
}
export type SqueezedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber],
    SqueezedEventObject
>

export type SqueezedEventFilter = TypedEventFilter<SqueezedEvent>

export interface SsovV3SetEventObject {
    ssovV3: string
}
export type SsovV3SetEvent = TypedEvent<[string], SsovV3SetEventObject>

export type SsovV3SetEventFilter = TypedEventFilter<SsovV3SetEvent>

export interface StrikeDataBootstrappedEventObject {
    _strike: BigNumber
    _epoch: BigNumber
}
export type StrikeDataBootstrappedEvent = TypedEvent<
    [BigNumber, BigNumber],
    StrikeDataBootstrappedEventObject
>

export type StrikeDataBootstrappedEventFilter =
    TypedEventFilter<StrikeDataBootstrappedEvent>

export interface SsovV3DatastoreClient extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: SsovV3DatastoreClientInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        bootstrapData(
            _strikes: PromiseOrValue<BigNumberish>[],
            _expiry: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _rewardTokensLength: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        bootstrapStrikeData(
            _strike: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _optionsToken: PromiseOrValue<string>,
            rewardTokensLength: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        borrow(
            _borrower: PromiseOrValue<string>,
            _strike: PromiseOrValue<BigNumberish>,
            _requiredCollateral: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardTokenAmounts: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        checkpoints(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                activeCollateral: BigNumber
                borrowedCollateral: BigNumber
                totalCollateral: BigNumber
                accruedPremium: BigNumber
            }
        >

        debtPositionMinter(overrides?: CallOverrides): Promise<[string]>

        deposit(
            _amount: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _strike: PromiseOrValue<BigNumberish>,
            _tokenId: PromiseOrValue<BigNumberish>,
            _totalRewardsArray: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        expire(
            _settlementPrice: PromiseOrValue<BigNumberish>,
            _settlementCollateralExchangeRate: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        getCheckpoint(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            checkpointIndex: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[VaultCheckpointStructOutput]>

        getCheckpoints(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[VaultCheckpointStructOutput[]]>

        getCheckpointsLength(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        getDebtPosition(
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                epoch: BigNumber
                strike: BigNumber
                supplied: BigNumber
                borrowed: BigNumber
            }
        >

        getEpochData(
            epoch: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[EpochDataStructOutput]>

        getEpochStrikeData(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[EpochStrikeDataStructOutput]>

        getExpiry(
            epoch: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        getOwnerDebtPositions(
            owner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber[]] & { tokenIds: BigNumber[] }>

        getWritePosition(
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[WritePositionStructOutput]>

        owner(overrides?: CallOverrides): Promise<[string]>

        preExpireEpoch(
            epoch: PromiseOrValue<BigNumberish>,
            totalCollateralFromLiquidations: PromiseOrValue<BigNumberish>,
            settlementPercentage: PromiseOrValue<BigNumberish>,
            settlementPrice: PromiseOrValue<BigNumberish>,
            preExpired: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        purchase(
            _epoch: PromiseOrValue<BigNumberish>,
            _strike: PromiseOrValue<BigNumberish>,
            _premium: PromiseOrValue<BigNumberish>,
            _requiredCollateral: PromiseOrValue<BigNumberish>,
            _totalRewardsArray: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        repay(
            _tokenId: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _suppliedAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDebtPositionMinter(
            _debtPositionMinter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setSsovV3(
            _ssovV3: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        ssov(overrides?: CallOverrides): Promise<[string]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    bootstrapData(
        _strikes: PromiseOrValue<BigNumberish>[],
        _expiry: PromiseOrValue<BigNumberish>,
        _epoch: PromiseOrValue<BigNumberish>,
        _rewardTokensLength: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    bootstrapStrikeData(
        _strike: PromiseOrValue<BigNumberish>,
        _epoch: PromiseOrValue<BigNumberish>,
        _optionsToken: PromiseOrValue<string>,
        rewardTokensLength: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    borrow(
        _borrower: PromiseOrValue<string>,
        _strike: PromiseOrValue<BigNumberish>,
        _requiredCollateral: PromiseOrValue<BigNumberish>,
        _epoch: PromiseOrValue<BigNumberish>,
        _amount: PromiseOrValue<BigNumberish>,
        _rewardTokenAmounts: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    checkpoints(
        arg0: PromiseOrValue<BigNumberish>,
        arg1: PromiseOrValue<BigNumberish>,
        arg2: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
            activeCollateral: BigNumber
            borrowedCollateral: BigNumber
            totalCollateral: BigNumber
            accruedPremium: BigNumber
        }
    >

    debtPositionMinter(overrides?: CallOverrides): Promise<string>

    deposit(
        _amount: PromiseOrValue<BigNumberish>,
        _epoch: PromiseOrValue<BigNumberish>,
        _strike: PromiseOrValue<BigNumberish>,
        _tokenId: PromiseOrValue<BigNumberish>,
        _totalRewardsArray: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    expire(
        _settlementPrice: PromiseOrValue<BigNumberish>,
        _settlementCollateralExchangeRate: PromiseOrValue<BigNumberish>,
        _epoch: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getCheckpoint(
        epoch: PromiseOrValue<BigNumberish>,
        strike: PromiseOrValue<BigNumberish>,
        checkpointIndex: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<VaultCheckpointStructOutput>

    getCheckpoints(
        epoch: PromiseOrValue<BigNumberish>,
        strike: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<VaultCheckpointStructOutput[]>

    getCheckpointsLength(
        epoch: PromiseOrValue<BigNumberish>,
        strike: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getDebtPosition(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
            epoch: BigNumber
            strike: BigNumber
            supplied: BigNumber
            borrowed: BigNumber
        }
    >

    getEpochData(
        epoch: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<EpochDataStructOutput>

    getEpochStrikeData(
        epoch: PromiseOrValue<BigNumberish>,
        strike: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<EpochStrikeDataStructOutput>

    getExpiry(
        epoch: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getOwnerDebtPositions(
        owner: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber[]>

    getWritePosition(
        tokenId: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<WritePositionStructOutput>

    owner(overrides?: CallOverrides): Promise<string>

    preExpireEpoch(
        epoch: PromiseOrValue<BigNumberish>,
        totalCollateralFromLiquidations: PromiseOrValue<BigNumberish>,
        settlementPercentage: PromiseOrValue<BigNumberish>,
        settlementPrice: PromiseOrValue<BigNumberish>,
        preExpired: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    purchase(
        _epoch: PromiseOrValue<BigNumberish>,
        _strike: PromiseOrValue<BigNumberish>,
        _premium: PromiseOrValue<BigNumberish>,
        _requiredCollateral: PromiseOrValue<BigNumberish>,
        _totalRewardsArray: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    repay(
        _tokenId: PromiseOrValue<BigNumberish>,
        _amount: PromiseOrValue<BigNumberish>,
        _suppliedAmount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDebtPositionMinter(
        _debtPositionMinter: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setSsovV3(
        _ssovV3: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    ssov(overrides?: CallOverrides): Promise<string>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        bootstrapData(
            _strikes: PromiseOrValue<BigNumberish>[],
            _expiry: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _rewardTokensLength: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        bootstrapStrikeData(
            _strike: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _optionsToken: PromiseOrValue<string>,
            rewardTokensLength: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        borrow(
            _borrower: PromiseOrValue<string>,
            _strike: PromiseOrValue<BigNumberish>,
            _requiredCollateral: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardTokenAmounts: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<BigNumber>

        checkpoints(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                activeCollateral: BigNumber
                borrowedCollateral: BigNumber
                totalCollateral: BigNumber
                accruedPremium: BigNumber
            }
        >

        debtPositionMinter(overrides?: CallOverrides): Promise<string>

        deposit(
            _amount: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _strike: PromiseOrValue<BigNumberish>,
            _tokenId: PromiseOrValue<BigNumberish>,
            _totalRewardsArray: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<void>

        expire(
            _settlementPrice: PromiseOrValue<BigNumberish>,
            _settlementCollateralExchangeRate: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        getCheckpoint(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            checkpointIndex: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<VaultCheckpointStructOutput>

        getCheckpoints(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<VaultCheckpointStructOutput[]>

        getCheckpointsLength(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getDebtPosition(
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                epoch: BigNumber
                strike: BigNumber
                supplied: BigNumber
                borrowed: BigNumber
            }
        >

        getEpochData(
            epoch: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<EpochDataStructOutput>

        getEpochStrikeData(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<EpochStrikeDataStructOutput>

        getExpiry(
            epoch: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getOwnerDebtPositions(
            owner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber[]>

        getWritePosition(
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<WritePositionStructOutput>

        owner(overrides?: CallOverrides): Promise<string>

        preExpireEpoch(
            epoch: PromiseOrValue<BigNumberish>,
            totalCollateralFromLiquidations: PromiseOrValue<BigNumberish>,
            settlementPercentage: PromiseOrValue<BigNumberish>,
            settlementPrice: PromiseOrValue<BigNumberish>,
            preExpired: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<void>

        purchase(
            _epoch: PromiseOrValue<BigNumberish>,
            _strike: PromiseOrValue<BigNumberish>,
            _premium: PromiseOrValue<BigNumberish>,
            _requiredCollateral: PromiseOrValue<BigNumberish>,
            _totalRewardsArray: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<void>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        repay(
            _tokenId: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _suppliedAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setDebtPositionMinter(
            _debtPositionMinter: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        setSsovV3(
            _ssovV3: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        ssov(overrides?: CallOverrides): Promise<string>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'BorrowSqueezed(uint256,uint256,uint256)'(
            _strike?: null,
            _requiredCollateral?: null,
            _epoch?: null
        ): BorrowSqueezedEventFilter
        BorrowSqueezed(
            _strike?: null,
            _requiredCollateral?: null,
            _epoch?: null
        ): BorrowSqueezedEventFilter

        'BorrowUnsqueezed(uint256,uint256,uint256)'(
            _strike?: null,
            _collateralToReturn?: null,
            _epoch?: null
        ): BorrowUnsqueezedEventFilter
        BorrowUnsqueezed(
            _strike?: null,
            _collateralToReturn?: null,
            _epoch?: null
        ): BorrowUnsqueezedEventFilter

        'Borrowed(address,uint256,uint256,uint256,uint256)'(
            _borrower?: null,
            _strike?: null,
            _requiredCollateral?: null,
            _epoch?: null,
            _amount?: null
        ): BorrowedEventFilter
        Borrowed(
            _borrower?: null,
            _strike?: null,
            _requiredCollateral?: null,
            _epoch?: null,
            _amount?: null
        ): BorrowedEventFilter

        'DataBootstrapped(uint256,uint256)'(
            _expiry?: null,
            _epoch?: null
        ): DataBootstrappedEventFilter
        DataBootstrapped(
            _expiry?: null,
            _epoch?: null
        ): DataBootstrappedEventFilter

        'DebtPositionMinterSet(address)'(
            debtPositionMinter?: null
        ): DebtPositionMinterSetEventFilter
        DebtPositionMinterSet(
            debtPositionMinter?: null
        ): DebtPositionMinterSetEventFilter

        'Deposited(uint256,uint256,uint256,uint256)'(
            _amount?: null,
            _epoch?: null,
            _strike?: null,
            _tokenId?: null
        ): DepositedEventFilter
        Deposited(
            _amount?: null,
            _epoch?: null,
            _strike?: null,
            _tokenId?: null
        ): DepositedEventFilter

        'Expired(uint256,uint256,uint256)'(
            _settlementPrice?: null,
            _settlementCollateralExchangeRate?: null,
            _epoch?: null
        ): ExpiredEventFilter
        Expired(
            _settlementPrice?: null,
            _settlementCollateralExchangeRate?: null,
            _epoch?: null
        ): ExpiredEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'PreExpired(uint256,uint256,uint256,bool)'(
            epoch?: null,
            settlementPercentage?: null,
            settlementPrice?: null,
            preExpired?: null
        ): PreExpiredEventFilter
        PreExpired(
            epoch?: null,
            settlementPercentage?: null,
            settlementPrice?: null,
            preExpired?: null
        ): PreExpiredEventFilter

        'Purchased(uint256,uint256,uint256,uint256)'(
            _epoch?: null,
            _strike?: null,
            _premium?: null,
            _requiredCollateral?: null
        ): PurchasedEventFilter
        Purchased(
            _epoch?: null,
            _strike?: null,
            _premium?: null,
            _requiredCollateral?: null
        ): PurchasedEventFilter

        'Repaid(uint256,uint256,uint256)'(
            _tokenId?: null,
            _amount?: null,
            _suppliedAmount?: null
        ): RepaidEventFilter
        Repaid(
            _tokenId?: null,
            _amount?: null,
            _suppliedAmount?: null
        ): RepaidEventFilter

        'RewardsUpdated(uint256,uint256)'(
            _strike?: null,
            _epoch?: null
        ): RewardsUpdatedEventFilter
        RewardsUpdated(_strike?: null, _epoch?: null): RewardsUpdatedEventFilter

        'Squeezed(uint256,uint256,uint256,uint256)'(
            _strike?: null,
            _requiredCollateral?: null,
            _epoch?: null,
            _premium?: null
        ): SqueezedEventFilter
        Squeezed(
            _strike?: null,
            _requiredCollateral?: null,
            _epoch?: null,
            _premium?: null
        ): SqueezedEventFilter

        'SsovV3Set(address)'(ssovV3?: null): SsovV3SetEventFilter
        SsovV3Set(ssovV3?: null): SsovV3SetEventFilter

        'StrikeDataBootstrapped(uint256,uint256)'(
            _strike?: null,
            _epoch?: null
        ): StrikeDataBootstrappedEventFilter
        StrikeDataBootstrapped(
            _strike?: null,
            _epoch?: null
        ): StrikeDataBootstrappedEventFilter
    }

    estimateGas: {
        bootstrapData(
            _strikes: PromiseOrValue<BigNumberish>[],
            _expiry: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _rewardTokensLength: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        bootstrapStrikeData(
            _strike: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _optionsToken: PromiseOrValue<string>,
            rewardTokensLength: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        borrow(
            _borrower: PromiseOrValue<string>,
            _strike: PromiseOrValue<BigNumberish>,
            _requiredCollateral: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardTokenAmounts: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        checkpoints(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        debtPositionMinter(overrides?: CallOverrides): Promise<BigNumber>

        deposit(
            _amount: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _strike: PromiseOrValue<BigNumberish>,
            _tokenId: PromiseOrValue<BigNumberish>,
            _totalRewardsArray: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        expire(
            _settlementPrice: PromiseOrValue<BigNumberish>,
            _settlementCollateralExchangeRate: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        getCheckpoint(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            checkpointIndex: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getCheckpoints(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getCheckpointsLength(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getDebtPosition(
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getEpochData(
            epoch: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getEpochStrikeData(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getExpiry(
            epoch: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getOwnerDebtPositions(
            owner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getWritePosition(
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        preExpireEpoch(
            epoch: PromiseOrValue<BigNumberish>,
            totalCollateralFromLiquidations: PromiseOrValue<BigNumberish>,
            settlementPercentage: PromiseOrValue<BigNumberish>,
            settlementPrice: PromiseOrValue<BigNumberish>,
            preExpired: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        purchase(
            _epoch: PromiseOrValue<BigNumberish>,
            _strike: PromiseOrValue<BigNumberish>,
            _premium: PromiseOrValue<BigNumberish>,
            _requiredCollateral: PromiseOrValue<BigNumberish>,
            _totalRewardsArray: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        repay(
            _tokenId: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _suppliedAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDebtPositionMinter(
            _debtPositionMinter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setSsovV3(
            _ssovV3: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        ssov(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        bootstrapData(
            _strikes: PromiseOrValue<BigNumberish>[],
            _expiry: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _rewardTokensLength: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        bootstrapStrikeData(
            _strike: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _optionsToken: PromiseOrValue<string>,
            rewardTokensLength: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        borrow(
            _borrower: PromiseOrValue<string>,
            _strike: PromiseOrValue<BigNumberish>,
            _requiredCollateral: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _rewardTokenAmounts: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        checkpoints(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        debtPositionMinter(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        deposit(
            _amount: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            _strike: PromiseOrValue<BigNumberish>,
            _tokenId: PromiseOrValue<BigNumberish>,
            _totalRewardsArray: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        expire(
            _settlementPrice: PromiseOrValue<BigNumberish>,
            _settlementCollateralExchangeRate: PromiseOrValue<BigNumberish>,
            _epoch: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        getCheckpoint(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            checkpointIndex: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getCheckpoints(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getCheckpointsLength(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getDebtPosition(
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getEpochData(
            epoch: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getEpochStrikeData(
            epoch: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getExpiry(
            epoch: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getOwnerDebtPositions(
            owner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getWritePosition(
            tokenId: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        preExpireEpoch(
            epoch: PromiseOrValue<BigNumberish>,
            totalCollateralFromLiquidations: PromiseOrValue<BigNumberish>,
            settlementPercentage: PromiseOrValue<BigNumberish>,
            settlementPrice: PromiseOrValue<BigNumberish>,
            preExpired: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        purchase(
            _epoch: PromiseOrValue<BigNumberish>,
            _strike: PromiseOrValue<BigNumberish>,
            _premium: PromiseOrValue<BigNumberish>,
            _requiredCollateral: PromiseOrValue<BigNumberish>,
            _totalRewardsArray: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        repay(
            _tokenId: PromiseOrValue<BigNumberish>,
            _amount: PromiseOrValue<BigNumberish>,
            _suppliedAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDebtPositionMinter(
            _debtPositionMinter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setSsovV3(
            _ssovV3: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        ssov(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
