/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type {
    FunctionFragment,
    Result,
    EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from './common'

export interface ZdteInterface extends utils.Interface {
    functions: {
        'addToContractWhitelist(address)': FunctionFragment
        'base()': FunctionFragment
        'baseLp()': FunctionFragment
        'claimCollateral(uint256)': FunctionFragment
        'deposit(bool,uint256)': FunctionFragment
        'divisor()': FunctionFragment
        'emergencyWithdraw(address[],bool)': FunctionFragment
        'expireOptionPosition(uint256)': FunctionFragment
        'feeDistributor()': FunctionFragment
        'feeOpenPosition()': FunctionFragment
        'genesisExpiry()': FunctionFragment
        'getCurrentExpiry()': FunctionFragment
        'getMarkPrice()': FunctionFragment
        'getVolatility(uint256)': FunctionFragment
        'isContract(address)': FunctionFragment
        'longOptionPosition(bool,uint256,uint256)': FunctionFragment
        'maxOtmPercentage()': FunctionFragment
        'optionPricing()': FunctionFragment
        'owner()': FunctionFragment
        'pause()': FunctionFragment
        'paused()': FunctionFragment
        'priceOracle()': FunctionFragment
        'quote()': FunctionFragment
        'quoteLp()': FunctionFragment
        'removeFromContractWhitelist(address)': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'spreadOptionPosition(bool,uint256,uint256,uint256)': FunctionFragment
        'strikeIncrement()': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'uniswapV3Router()': FunctionFragment
        'unpause()': FunctionFragment
        'volatilityOracle()': FunctionFragment
        'whitelistedContracts(address)': FunctionFragment
        'withdraw(bool,uint256)': FunctionFragment
        'zdtePositionMinter()': FunctionFragment
        'zdtePositions(uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'addToContractWhitelist'
            | 'base'
            | 'baseLp'
            | 'claimCollateral'
            | 'deposit'
            | 'divisor'
            | 'emergencyWithdraw'
            | 'expireOptionPosition'
            | 'feeDistributor'
            | 'feeOpenPosition'
            | 'genesisExpiry'
            | 'getCurrentExpiry'
            | 'getMarkPrice'
            | 'getVolatility'
            | 'isContract'
            | 'longOptionPosition'
            | 'maxOtmPercentage'
            | 'optionPricing'
            | 'owner'
            | 'pause'
            | 'paused'
            | 'priceOracle'
            | 'quote'
            | 'quoteLp'
            | 'removeFromContractWhitelist'
            | 'renounceOwnership'
            | 'spreadOptionPosition'
            | 'strikeIncrement'
            | 'transferOwnership'
            | 'uniswapV3Router'
            | 'unpause'
            | 'volatilityOracle'
            | 'whitelistedContracts'
            | 'withdraw'
            | 'zdtePositionMinter'
            | 'zdtePositions'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'addToContractWhitelist',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'base', values?: undefined): string
    encodeFunctionData(functionFragment: 'baseLp', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'claimCollateral',
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'deposit',
        values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'divisor', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'emergencyWithdraw',
        values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(
        functionFragment: 'expireOptionPosition',
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'feeDistributor',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'feeOpenPosition',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'genesisExpiry',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'getCurrentExpiry',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'getMarkPrice',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'getVolatility',
        values: [PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'isContract',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'longOptionPosition',
        values: [
            PromiseOrValue<boolean>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'maxOtmPercentage',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'optionPricing',
        values?: undefined
    ): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'pause', values?: undefined): string
    encodeFunctionData(functionFragment: 'paused', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'priceOracle',
        values?: undefined
    ): string
    encodeFunctionData(functionFragment: 'quote', values?: undefined): string
    encodeFunctionData(functionFragment: 'quoteLp', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'removeFromContractWhitelist',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'renounceOwnership',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'spreadOptionPosition',
        values: [
            PromiseOrValue<boolean>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'strikeIncrement',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'transferOwnership',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'uniswapV3Router',
        values?: undefined
    ): string
    encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'volatilityOracle',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'whitelistedContracts',
        values: [PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdraw',
        values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'zdtePositionMinter',
        values?: undefined
    ): string
    encodeFunctionData(
        functionFragment: 'zdtePositions',
        values: [PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(
        functionFragment: 'addToContractWhitelist',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'base', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'baseLp', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'claimCollateral',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'divisor', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'emergencyWithdraw',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'expireOptionPosition',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'feeDistributor',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'feeOpenPosition',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'genesisExpiry',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getCurrentExpiry',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getMarkPrice',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getVolatility',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'isContract',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'longOptionPosition',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'maxOtmPercentage',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'optionPricing',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'priceOracle',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quoteLp', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'removeFromContractWhitelist',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'renounceOwnership',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'spreadOptionPosition',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'strikeIncrement',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'transferOwnership',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'uniswapV3Router',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'volatilityOracle',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'whitelistedContracts',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'zdtePositionMinter',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'zdtePositions',
        data: BytesLike
    ): Result

    events: {
        'AddToContractWhitelist(address)': EventFragment
        'ClaimCollateral(uint256,address)': EventFragment
        'Deposit(bool,uint256,address)': EventFragment
        'ExpireOptionPosition(uint256,uint256,address)': EventFragment
        'LongOptionPosition(uint256,uint256,uint256,address)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'Paused(address)': EventFragment
        'RemoveFromContractWhitelist(address)': EventFragment
        'SpreadOptionPosition(uint256,uint256,uint256,uint256,address)': EventFragment
        'Unpaused(address)': EventFragment
        'Withdraw(bool,uint256,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'AddToContractWhitelist'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ClaimCollateral'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ExpireOptionPosition'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LongOptionPosition'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
    getEvent(
        nameOrSignatureOrTopic: 'RemoveFromContractWhitelist'
    ): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SpreadOptionPosition'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export interface AddToContractWhitelistEventObject {
    _contract: string
}
export type AddToContractWhitelistEvent = TypedEvent<
    [string],
    AddToContractWhitelistEventObject
>

export type AddToContractWhitelistEventFilter =
    TypedEventFilter<AddToContractWhitelistEvent>

export interface ClaimCollateralEventObject {
    amount: BigNumber
    sender: string
}
export type ClaimCollateralEvent = TypedEvent<
    [BigNumber, string],
    ClaimCollateralEventObject
>

export type ClaimCollateralEventFilter = TypedEventFilter<ClaimCollateralEvent>

export interface DepositEventObject {
    isQuote: boolean
    amount: BigNumber
    sender: string
}
export type DepositEvent = TypedEvent<
    [boolean, BigNumber, string],
    DepositEventObject
>

export type DepositEventFilter = TypedEventFilter<DepositEvent>

export interface ExpireOptionPositionEventObject {
    id: BigNumber
    pnl: BigNumber
    user: string
}
export type ExpireOptionPositionEvent = TypedEvent<
    [BigNumber, BigNumber, string],
    ExpireOptionPositionEventObject
>

export type ExpireOptionPositionEventFilter =
    TypedEventFilter<ExpireOptionPositionEvent>

export interface LongOptionPositionEventObject {
    id: BigNumber
    amount: BigNumber
    strike: BigNumber
    user: string
}
export type LongOptionPositionEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, string],
    LongOptionPositionEventObject
>

export type LongOptionPositionEventFilter =
    TypedEventFilter<LongOptionPositionEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
    account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface RemoveFromContractWhitelistEventObject {
    _contract: string
}
export type RemoveFromContractWhitelistEvent = TypedEvent<
    [string],
    RemoveFromContractWhitelistEventObject
>

export type RemoveFromContractWhitelistEventFilter =
    TypedEventFilter<RemoveFromContractWhitelistEvent>

export interface SpreadOptionPositionEventObject {
    id: BigNumber
    amount: BigNumber
    longStrike: BigNumber
    shortStrike: BigNumber
    user: string
}
export type SpreadOptionPositionEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber, string],
    SpreadOptionPositionEventObject
>

export type SpreadOptionPositionEventFilter =
    TypedEventFilter<SpreadOptionPositionEvent>

export interface UnpausedEventObject {
    account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface WithdrawEventObject {
    isQuote: boolean
    amount: BigNumber
    sender: string
}
export type WithdrawEvent = TypedEvent<
    [boolean, BigNumber, string],
    WithdrawEventObject
>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface Zdte extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: ZdteInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        addToContractWhitelist(
            _contract: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        base(overrides?: CallOverrides): Promise<[string]>

        baseLp(overrides?: CallOverrides): Promise<[string]>

        claimCollateral(
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        deposit(
            isQuote: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        divisor(overrides?: CallOverrides): Promise<[BigNumber]>

        emergencyWithdraw(
            tokens: PromiseOrValue<string>[],
            transferNative: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        expireOptionPosition(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        feeDistributor(overrides?: CallOverrides): Promise<[string]>

        feeOpenPosition(overrides?: CallOverrides): Promise<[BigNumber]>

        genesisExpiry(overrides?: CallOverrides): Promise<[BigNumber]>

        getCurrentExpiry(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { expiry: BigNumber }>

        getMarkPrice(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { price: BigNumber }>

        getVolatility(
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { volatility: BigNumber }>

        isContract(
            addr: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        longOptionPosition(
            isPut: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        maxOtmPercentage(overrides?: CallOverrides): Promise<[BigNumber]>

        optionPricing(overrides?: CallOverrides): Promise<[string]>

        owner(overrides?: CallOverrides): Promise<[string]>

        pause(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        paused(overrides?: CallOverrides): Promise<[boolean]>

        priceOracle(overrides?: CallOverrides): Promise<[string]>

        quote(overrides?: CallOverrides): Promise<[string]>

        quoteLp(overrides?: CallOverrides): Promise<[string]>

        removeFromContractWhitelist(
            _contract: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        spreadOptionPosition(
            isPut: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            longStrike: PromiseOrValue<BigNumberish>,
            shortStrike: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        strikeIncrement(overrides?: CallOverrides): Promise<[BigNumber]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        uniswapV3Router(overrides?: CallOverrides): Promise<[string]>

        unpause(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        volatilityOracle(overrides?: CallOverrides): Promise<[string]>

        whitelistedContracts(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        withdraw(
            isQuote: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        zdtePositionMinter(overrides?: CallOverrides): Promise<[string]>

        zdtePositions(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [
                boolean,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                number
            ] & {
                isOpen: boolean
                positions: BigNumber
                longStrike: BigNumber
                shortStrike: BigNumber
                longPremium: BigNumber
                shortPremium: BigNumber
                fees: BigNumber
                pnl: BigNumber
                openedAt: BigNumber
                expiry: BigNumber
                positionType: number
            }
        >
    }

    addToContractWhitelist(
        _contract: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    base(overrides?: CallOverrides): Promise<string>

    baseLp(overrides?: CallOverrides): Promise<string>

    claimCollateral(
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    deposit(
        isQuote: PromiseOrValue<boolean>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    divisor(overrides?: CallOverrides): Promise<BigNumber>

    emergencyWithdraw(
        tokens: PromiseOrValue<string>[],
        transferNative: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    expireOptionPosition(
        id: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    feeDistributor(overrides?: CallOverrides): Promise<string>

    feeOpenPosition(overrides?: CallOverrides): Promise<BigNumber>

    genesisExpiry(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentExpiry(overrides?: CallOverrides): Promise<BigNumber>

    getMarkPrice(overrides?: CallOverrides): Promise<BigNumber>

    getVolatility(
        strike: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    isContract(
        addr: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<boolean>

    longOptionPosition(
        isPut: PromiseOrValue<boolean>,
        amount: PromiseOrValue<BigNumberish>,
        strike: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    maxOtmPercentage(overrides?: CallOverrides): Promise<BigNumber>

    optionPricing(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    pause(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<boolean>

    priceOracle(overrides?: CallOverrides): Promise<string>

    quote(overrides?: CallOverrides): Promise<string>

    quoteLp(overrides?: CallOverrides): Promise<string>

    removeFromContractWhitelist(
        _contract: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    spreadOptionPosition(
        isPut: PromiseOrValue<boolean>,
        amount: PromiseOrValue<BigNumberish>,
        longStrike: PromiseOrValue<BigNumberish>,
        shortStrike: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    strikeIncrement(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    uniswapV3Router(overrides?: CallOverrides): Promise<string>

    unpause(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    volatilityOracle(overrides?: CallOverrides): Promise<string>

    whitelistedContracts(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<boolean>

    withdraw(
        isQuote: PromiseOrValue<boolean>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    zdtePositionMinter(overrides?: CallOverrides): Promise<string>

    zdtePositions(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [
            boolean,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            number
        ] & {
            isOpen: boolean
            positions: BigNumber
            longStrike: BigNumber
            shortStrike: BigNumber
            longPremium: BigNumber
            shortPremium: BigNumber
            fees: BigNumber
            pnl: BigNumber
            openedAt: BigNumber
            expiry: BigNumber
            positionType: number
        }
    >

    callStatic: {
        addToContractWhitelist(
            _contract: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        base(overrides?: CallOverrides): Promise<string>

        baseLp(overrides?: CallOverrides): Promise<string>

        claimCollateral(
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        deposit(
            isQuote: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        divisor(overrides?: CallOverrides): Promise<BigNumber>

        emergencyWithdraw(
            tokens: PromiseOrValue<string>[],
            transferNative: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<void>

        expireOptionPosition(
            id: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        feeDistributor(overrides?: CallOverrides): Promise<string>

        feeOpenPosition(overrides?: CallOverrides): Promise<BigNumber>

        genesisExpiry(overrides?: CallOverrides): Promise<BigNumber>

        getCurrentExpiry(overrides?: CallOverrides): Promise<BigNumber>

        getMarkPrice(overrides?: CallOverrides): Promise<BigNumber>

        getVolatility(
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        isContract(
            addr: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        longOptionPosition(
            isPut: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        maxOtmPercentage(overrides?: CallOverrides): Promise<BigNumber>

        optionPricing(overrides?: CallOverrides): Promise<string>

        owner(overrides?: CallOverrides): Promise<string>

        pause(overrides?: CallOverrides): Promise<void>

        paused(overrides?: CallOverrides): Promise<boolean>

        priceOracle(overrides?: CallOverrides): Promise<string>

        quote(overrides?: CallOverrides): Promise<string>

        quoteLp(overrides?: CallOverrides): Promise<string>

        removeFromContractWhitelist(
            _contract: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        spreadOptionPosition(
            isPut: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            longStrike: PromiseOrValue<BigNumberish>,
            shortStrike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        strikeIncrement(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        uniswapV3Router(overrides?: CallOverrides): Promise<string>

        unpause(overrides?: CallOverrides): Promise<void>

        volatilityOracle(overrides?: CallOverrides): Promise<string>

        whitelistedContracts(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        withdraw(
            isQuote: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        zdtePositionMinter(overrides?: CallOverrides): Promise<string>

        zdtePositions(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [
                boolean,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                number
            ] & {
                isOpen: boolean
                positions: BigNumber
                longStrike: BigNumber
                shortStrike: BigNumber
                longPremium: BigNumber
                shortPremium: BigNumber
                fees: BigNumber
                pnl: BigNumber
                openedAt: BigNumber
                expiry: BigNumber
                positionType: number
            }
        >
    }

    filters: {
        'AddToContractWhitelist(address)'(
            _contract?: PromiseOrValue<string> | null
        ): AddToContractWhitelistEventFilter
        AddToContractWhitelist(
            _contract?: PromiseOrValue<string> | null
        ): AddToContractWhitelistEventFilter

        'ClaimCollateral(uint256,address)'(
            amount?: null,
            sender?: PromiseOrValue<string> | null
        ): ClaimCollateralEventFilter
        ClaimCollateral(
            amount?: null,
            sender?: PromiseOrValue<string> | null
        ): ClaimCollateralEventFilter

        'Deposit(bool,uint256,address)'(
            isQuote?: null,
            amount?: null,
            sender?: PromiseOrValue<string> | null
        ): DepositEventFilter
        Deposit(
            isQuote?: null,
            amount?: null,
            sender?: PromiseOrValue<string> | null
        ): DepositEventFilter

        'ExpireOptionPosition(uint256,uint256,address)'(
            id?: null,
            pnl?: null,
            user?: PromiseOrValue<string> | null
        ): ExpireOptionPositionEventFilter
        ExpireOptionPosition(
            id?: null,
            pnl?: null,
            user?: PromiseOrValue<string> | null
        ): ExpireOptionPositionEventFilter

        'LongOptionPosition(uint256,uint256,uint256,address)'(
            id?: null,
            amount?: null,
            strike?: null,
            user?: PromiseOrValue<string> | null
        ): LongOptionPositionEventFilter
        LongOptionPosition(
            id?: null,
            amount?: null,
            strike?: null,
            user?: PromiseOrValue<string> | null
        ): LongOptionPositionEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'Paused(address)'(account?: null): PausedEventFilter
        Paused(account?: null): PausedEventFilter

        'RemoveFromContractWhitelist(address)'(
            _contract?: PromiseOrValue<string> | null
        ): RemoveFromContractWhitelistEventFilter
        RemoveFromContractWhitelist(
            _contract?: PromiseOrValue<string> | null
        ): RemoveFromContractWhitelistEventFilter

        'SpreadOptionPosition(uint256,uint256,uint256,uint256,address)'(
            id?: null,
            amount?: null,
            longStrike?: null,
            shortStrike?: null,
            user?: PromiseOrValue<string> | null
        ): SpreadOptionPositionEventFilter
        SpreadOptionPosition(
            id?: null,
            amount?: null,
            longStrike?: null,
            shortStrike?: null,
            user?: PromiseOrValue<string> | null
        ): SpreadOptionPositionEventFilter

        'Unpaused(address)'(account?: null): UnpausedEventFilter
        Unpaused(account?: null): UnpausedEventFilter

        'Withdraw(bool,uint256,address)'(
            isQuote?: null,
            amount?: null,
            sender?: PromiseOrValue<string> | null
        ): WithdrawEventFilter
        Withdraw(
            isQuote?: null,
            amount?: null,
            sender?: PromiseOrValue<string> | null
        ): WithdrawEventFilter
    }

    estimateGas: {
        addToContractWhitelist(
            _contract: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        base(overrides?: CallOverrides): Promise<BigNumber>

        baseLp(overrides?: CallOverrides): Promise<BigNumber>

        claimCollateral(
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        deposit(
            isQuote: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        divisor(overrides?: CallOverrides): Promise<BigNumber>

        emergencyWithdraw(
            tokens: PromiseOrValue<string>[],
            transferNative: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        expireOptionPosition(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        feeDistributor(overrides?: CallOverrides): Promise<BigNumber>

        feeOpenPosition(overrides?: CallOverrides): Promise<BigNumber>

        genesisExpiry(overrides?: CallOverrides): Promise<BigNumber>

        getCurrentExpiry(overrides?: CallOverrides): Promise<BigNumber>

        getMarkPrice(overrides?: CallOverrides): Promise<BigNumber>

        getVolatility(
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        isContract(
            addr: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        longOptionPosition(
            isPut: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        maxOtmPercentage(overrides?: CallOverrides): Promise<BigNumber>

        optionPricing(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        pause(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        paused(overrides?: CallOverrides): Promise<BigNumber>

        priceOracle(overrides?: CallOverrides): Promise<BigNumber>

        quote(overrides?: CallOverrides): Promise<BigNumber>

        quoteLp(overrides?: CallOverrides): Promise<BigNumber>

        removeFromContractWhitelist(
            _contract: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        spreadOptionPosition(
            isPut: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            longStrike: PromiseOrValue<BigNumberish>,
            shortStrike: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        strikeIncrement(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        uniswapV3Router(overrides?: CallOverrides): Promise<BigNumber>

        unpause(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        volatilityOracle(overrides?: CallOverrides): Promise<BigNumber>

        whitelistedContracts(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        withdraw(
            isQuote: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        zdtePositionMinter(overrides?: CallOverrides): Promise<BigNumber>

        zdtePositions(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    populateTransaction: {
        addToContractWhitelist(
            _contract: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        base(overrides?: CallOverrides): Promise<PopulatedTransaction>

        baseLp(overrides?: CallOverrides): Promise<PopulatedTransaction>

        claimCollateral(
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        deposit(
            isQuote: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        divisor(overrides?: CallOverrides): Promise<PopulatedTransaction>

        emergencyWithdraw(
            tokens: PromiseOrValue<string>[],
            transferNative: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        expireOptionPosition(
            id: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>

        feeOpenPosition(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        genesisExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getCurrentExpiry(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getMarkPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getVolatility(
            strike: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        isContract(
            addr: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        longOptionPosition(
            isPut: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            strike: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        maxOtmPercentage(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        optionPricing(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        pause(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

        priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>

        quote(overrides?: CallOverrides): Promise<PopulatedTransaction>

        quoteLp(overrides?: CallOverrides): Promise<PopulatedTransaction>

        removeFromContractWhitelist(
            _contract: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        spreadOptionPosition(
            isPut: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            longStrike: PromiseOrValue<BigNumberish>,
            shortStrike: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        strikeIncrement(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        uniswapV3Router(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        unpause(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        volatilityOracle(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        whitelistedContracts(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        withdraw(
            isQuote: PromiseOrValue<boolean>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        zdtePositionMinter(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        zdtePositions(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>
    }
}
